download.file(quiz1Url, destfile="./data/Idaho_surveyHousing.csv")
list.files("./data")
head(quiz1Url,0)
head(quiz1Url,1)
idahoHousing <- read.csv("data/Idaho_surveyHousing.csv", colClasses = "character")
head(idahoHousing,0)
propVal <- subset(idahoHousing,!is.na(idahoHousing[,37]))
nrow(idahoHousing)
nrow(propVal)
mean(propVal[,37])
propVal[,37] <- as.numeric(propVal[,37])
idahoHousing[,37] <- as.numeric(idahoHousing[,37])
propVal <- subset(idahoHousing,!is.na(idahoHousing[,37]))
nrow(idahoHousing)
nrow(propVal)
mean(propVal[,37])
overMillion <- subset(propVal,propVal[,37] > 999999)
nrow(overMillion)
overMillion <- subset(idahoHousing,idahoHousing[,37] > 999999)
nrow(overMillion)
idahoHousing <- read.csv("data/Idaho_surveyHousing.csv", header=TRUE)
head(idahoHousing[,37])
overMillion <- subset(idahoHousing,idahoHousing[,37] == 24)
nrow(overMillion)
gasUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx "
download.file(gasUrl, destfile="./data/gov_NGAP.xlsx", method="curl")
list.files("./data")
library(xlsx)
dat <- read.xlsx("./data/gov_NGAP.xslx",sheetIndex=1,rowIndex = 18:23, colIndex = 7:15,header=TRUE)
dat <- read.xlsx("/data/gov_NGAP.xslx",sheetIndex=1,rowIndex = 18:23, colIndex = 7:15,header=TRUE)
dat <- read.xlsx("data/gov_NGAP.xslx",sheetIndex=1,rowIndex = 18:23, colIndex = 7:15,header=TRUE)
dat <- read.xlsx("data/gov_NGAP.xlsx",sheetIndex=1,rowIndex = 18:23, colIndex = 7:15,header=TRUE)
mysum <- sum(dat$Zip*dat$Ext,na.rm=T)
mysum
library(XML)
baltimoreUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xmldoc <- xmlTreeParse(baltimoreUrl,useInternal=TRUE)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
#show the highest Node
rootNode <- xmlRoot(doc)
xmldoc <- xmlTreeParse(baltimoreUrl,useInternal=TRUE)
baltimoreUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- htmlTreeParse(baltimoreUrl,useInternal=TRUE)
doc <- htmlTreeParse(baltimoreUrl)
library(XML)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlParse(fileUrl)
xml_data <- xmlToList(fileUrl)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
download.file(fileUrl,destfile = "./data/restaurants.xml", method = "curl")
xmlfile = xmlParse("data/restaurants.xml")
class(xmlfile)
xmltop = xmlRoot(xmlfile)
xmltop
xmlName(xmltop)
xmltop[1]
xmltop[2]
xmltop[[1]]
xmlSize(xmltop[[1]])
xmlSApply(xmltop[[1]], xmlName)
xmltop[[1]]
xml_data <- xmlToList(xmlfile
)
head(xml_data)
head(xml_data,0)
head(xml_data,1)
zipcode <- xml_data[["zipcode"]]
zipcode
zipcode <- xml_data[["zipcode"]][["parameters"]]
zipcode <- zipcode[names(zipcode) == "zipcode"]
zipcode
rootNode <- xmlRoot(xmlfile)
xmlfile = xmlTreeParse("data/restaurants.xml", )
library(XML)
xmlfile = xmlTreeParse("data/restaurants.xml", )
rootNode <- xmlRoot(xmlfile)
xmlName(rootNode)
names(rootNode)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootnNode)
xmlName(rootNode)
names(rootNode)
rootNode[[1]][[1]][[1]]
rootNode[[1]][[1]]
rootNode[[1]][[2]]
rootNode[[2]][[1]]
rootNode[[2]][[1]][[1]]
rootNode[[3]][[1]]
rootNode[[3]][[1]][[1]]
rootNode[[4]][[1]]
rootNode[[4]][[1]][[1]]
rootNode[[3]][[2]]
rootNode[[3]][[1]][[1]]
rootNode[[4]][[1]]
rootNode[[4]][[2]]
rootNode[[5]][[2]]
rootNode[[5]][[3]]
xmlSApply(rootNode,xmlValue)
xpathSApply(rootNode,"//name",xmlValue)
xpathSApply(rootNode,"//price",xmlValue)
xpathSApply(rootNode,"//description",xmlValue)
xpathSApply(rootNode,"//DescrIption",xmlValue)
xpathSApply(rootNode,"//DescrIption",xmlValue)
library(XML)
#fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
xmlSApply(rootNode,xmlValue)
#XPath
#Answer to quiz1 question 4 of restaurants in zip code
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
download.file(fileUrl,destfile="./data/restaurants.xml")
doc <- xmlTreeParse("./data/restaurants.xml",useInternal=TRUE)
xpathSApply(rootNode,"//zipcode",xmlValue)
allzipcodes <- xpathSApply(rootNode,"//zipcode",xmlValue)
allzipcodes[allzipcodes == "21231"]
# Count number of elements with "length". Could be
# multiple occurrences.
length(allzipcodes)
# Can convert to table and then use subset
restaurant_zc <- table(allzipcodes)
allzipcodes <- xpathSApply(rootNode,"//zipcode",xmlValue)
allzipcodes[allzipcodes == "21231"]
allzipcodes <- xpathSApply(rootNode,"//zipcode",xmlValue)
length(allzipcodes)
restaurant_zc <- table(allzipcodes)
restaurant_df <- as.data.frame(table(allzipcodes))
xpathSApply(rootNode,"//zipcode",xmlValue)
nrow(restaurant_zc)
library(data.table)
xmlSApply(rootNode,xmlValue)
#XPath
#Answer to quiz1 question 4 of restaurants in zip code
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
download.file(fileUrl,destfile="./data/restaurants.xml")
doc <- xmlTreeParse("./data/restaurants.xml",useInternal=TRUE)
xpathSApply(rootNode,"//zipcode",xmlValue)
allzipcodes <- xpathSApply(rootNode,"//zipcode",xmlValue)
allzipcodes
xmlSApply(rootNode,xmlValue)
doc <- xmlTreeParse("./data/restaurants.xml",useInternal=TRUE)
rootNode <- xmlRoot(doc)
xpathSApply(rootNode,"//zipcode",xmlValue)
allzipcodes <- xpathSApply(rootNode,"//zipcode",xmlValue)
# Count number of elements with "length". Could be
# multiple occurrences.
length(allzipcodes)
# Can convert to table and then use subset
restaurant_zc <- table(allzipcodes)
nrow(restaurant_zc)
#listing table and doing "nrow" should give same count
subset(restaurant_df,restaurant_df$allzipcodes == "21231")
subset(restaurant_zc,restaurant_zc$allzipcodes == "21231")
subset(restaurant_zc,restaurant_zc[,1] == "21231")
head(restaurant_zc)
restaurant_df <- as.data.frame(table(allzipcodes))
nrow(restaurant_df)
#This also gives unique occurrences and how many times occurred.
subset(restaurant_df,restaurant_df[1] == "21231")
#allzipcodes Freq
#27       21231  127
#Both table and dataframe used the target "allzipcodes" as column header
xpathSApply(rootNode,"//name",xmlValue)
xpathSApply(rootNode,"//price",xmlValue)
xpathSApply(rootNode,"//description",xmlValue)
###case-sensitive
library(datasets)
data(iris)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
library(RMySQL)
library("rstudio", lib.loc="~/R/win-library/3.1")
library("RSQLite", lib.loc="~/R/win-library/3.1")
library("XML", lib.loc="~/R/win-library/3.1")
library("swirl", lib.loc="~/R/win-library/3.1")
library("XLConnectJars", lib.loc="~/R/win-library/3.1")
library("XLConnect", lib.loc="~/R/win-library/3.1")
ucscDB <- dbConnect(MySQL(),user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"):dbDisconnect(ucscDb);
ucscDb <- dbConnect(MySQL(),user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"):dbDisconnect(ucscDb);
result <- dbGetQuery(ucscDb,"show databases;");dbDisconnect(ucscDb);
ucscDb <- dbConnect(MySQL(),user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;");dbDisconnect(ucscDb);
ucscDb <- dbConnect(MySQL(),user="genome", db="hg19",host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
allTables <- dbListTables("hg19"")
""
allTables <- dbListTables("hg19")
install.packages("dbListTables")
ucscDb <- dbConnect(MySQL(),user="genome", db="hg19",host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(db)
length(allTables)
ucscDb <- dbConnect(MySQL(),user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;");dbDisconnect(ucscDb);
ucscDb <- dbConnect(MySQL(),user="genome", db="hg19",host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables("hg19")
gasUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx "
download.file(gasUrl, destfile="./data/gov_NGAP.xlsx", method="curl")
list.files("./data")
library(xlsx)
dat <- read.xlsx("data/gov_NGAP.xlsx",sheetIndex=1,rowIndex = 18:23, colIndex = 7:15,header=TRUE)
mysum <- sum(dat$Zip*dat$Ext,na.rm=T)
mysum
library(XML)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
download.file(fileUrl,destfile = "./data/restaurants.xml", method = "curl")
xmlfile = xmlParse("data/restaurants.xml")
xmlfile = xmlTreeParse("data/restaurants.xml", )
class(xmlfile)
xml_data <- xmlToList(xmlfile)
rootNode <- xmlRoot(xmlfile)
xmlName(rootNode)
names(rootNode)
rootNode[[1]][[1]]
xpathSApply(rootNode,"//zipcode",xmlValue)
allzipcodes <- xpathSApply(rootNode,"//zipcode",xmlValue)
# Count number of elements with "length". Could be
# multiple occurrences.
length(allzipcodes)
# Can convert to table and then use subset
restaurant_zc <- table(allzipcodes)
nrow(restaurant_zc)
#listing table and doing "nrow" should give same count
#????subset(restaurant_zc,restaurant_zc[,1] == "21231")
#table will show how many occurrences of each element if duplicated
# or convert to data frame
restaurant_df <- as.data.frame(table(allzipcodes))
nrow(restaurant_df)
source('~/R/HOME/R_possibleCache_answer2.R')
source('~/.active-rstudio-document')
makeCacheMatrix(1:10,2:5)
makeCacheMatrix(1:10)
source('~/R/HOME/Tutorial_OAUTH_github.R')
install.packages("httpuv")
library("httpuv")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "56b637a5baffac62cad9")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
install.packages("httpuv")
library(httr)
library(httpuv)
oauth_endpoints("github")
myapp <- oauth_app("github", "534684ee344756cb7f19",
secret="43f1f4de6db56f4de76829f57f154608d773c2b6")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
source('~/R/HOME/Tutorial_OAUTH_github.R')
myapp
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
req <- GET(Get_Clean_quiz2, gtoken)
gtoken <- config(token = github_token)
oauth_endpoints("github")
library(httr)
library(httpuv)
oauth_endpoints("github")
myapp <- oauth_app("github", "534684ee344756cb7f19", secret="43f1f4de6db56f4de76829f57f154608d773c2b6")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/williamsja0314/Get_Clean_quiz2", gtoken)
req
req <- GET("https://www.github.com/williamsja0314", gtoken)
req
req2 <- GET("https://github.com/settings/applications/171383", gtoken)
req2
req2 <- GET("https://api.github.com/users/jtleek/repos", gtoken)
req2
stop_for_status(req)
content(req)
content(req2)
content(req2)
mydata <- content(req2)
str(mydata)
head(mydata)
req2
mydata
head(mydata)
head(mydata)
acs <- read.csv("data/getdata_data_ss06pid.csv")
head(acs,1)
head(acs,0)
sum(acs[,PWGTP])
acs[PWGTP]
acs[,PWGTP]
acs[pwgtp76]
acs[,pwgtp76]
library(httr)
library(httpuv)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "534684ee344756cb7f19", secret="43f1f4de6db56f4de76829f57f154608d773c2b6")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://www.github.com/williamsja0314", gtoken)
req2 <- GET("https://api.github.com/users/jtleek/repos", gtoken)
req3 <- xmlTreeParse(req2,useInternal=TRUE)
library(XML)
library(xml)
req3 <- xmlTreeParse(req2,useInternal=TRUE)
req3
req3 <- xmlTreeParse(req2,useInternal=TRUE)
req2
r
req3 <- xmlTreeParse(req2,useInternal=TRUE)
req2
req3
req3 <- xmlTreeParse(req2,useInternal=TRUE)
rootNode <- xmlRoot(req3)
library(httr)
library(httpuv)
oauth_endpoints("github")
myapp <- oauth_app("github", "534684ee344756cb7f19", secret="43f1f4de6db56f4de76829f57f154608d773c2b6")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req3 <- xmlTreeParse(GET("https://api.github.com/users/jtleek/repos", gtoken),useInternal=TRUE)
library(XML)
req3 <- xmlTreeParse(GET("https://api.github.com/users/jtleek/repos", gtoken),useInternal=TRUE)
req3
req3 <-  htmlTreeParse(GET("https://api.github.com/users/jtleek/repos", gtoken),useInternal=TRUE)
req3
rootNode <- xmlRoot(req3)
rootNode
head(rootNode)
head(rootNode,0)
head(rootNode,3)
rootNode[[1]][[1]][[1]]
rootNode[[2]][[1]]
allzipcodes <- xpathSApply(rootNode,"//date",xmlValue)
allzipcodes <- xpathSApply(rootNode,"//watchers",xmlValue)
allzipcodes <- xpathSApply(rootNode,"//watchers",xmlValue)
req3
fileUrl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileUrl,useInternal=TRUE)
library(XML)
doc <- htmlTreeParse(fileUrl,useInternal=TRUE)
doc
doc[1,]
doc[1]
head(doc)
doc
head(doc)
scores <- xpathSApply(doc,"//li[@class='score']",xmlValue)
scores
teams <- xpathSApply(doc,"//li[@class='team-name']",xmlValue)
teams
nrow(doc)
fileUrl
library(httr)
library(httpuv)
library(XML)
fileUrl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileUrl,useInternal=TRUE)
scores <- xpathSApply(doc,"//li[@class='score']",xmlValue)
teams <- xpathSApply(doc,"//li[@class='team-name']",xmlValue)
scores
teams
req3 <-  htmlTreeParse(GET("https://api.github.com/users/jtleek/repos", gtoken),useInternal=TRUE)
nrow(req3)
fileUrl <- "http://biostat.jhsph.edu/~jleek/contact.html""
)
""
fileUrl <- "http://biostat.jhsph.edu/~jleek/contact.html"
doc <- htmlTreeParse(fileUrl,useInternal=TRUE)
doc
head(doc)
# Coursera R-Programming - Programming Assignment 2
## Creates a free floating variable to cache the inverse
makeCacheMatrix <- function(x = matrix()) {
# i will store the inverse
inv <- NULL
# set should be used to alter the matrix
# it invalidates the cache
set <- function(y) {
x <<- y
inv <<- NULL
}
# get simply returns the raw matrix
get <- function() {
x
}
# setinv sets the inv variable
# should be used only by cacheSolve
setinv <- function(i) {
inv <<- i
}
# getinv gets the cached inverse
getinv <- function() {
inv
}
# return the special matrix
list(set = set,
get = get,
setinv = setinv,
getinv = getinv)
}
#
## The solve() computes the inverse of the special matrix
# returned by makeCacheMatrix.
# The inverse matrix is derived and cached on first call,
# Then, on subsequent calls, the cache is used if there have
# not been any changes in data. Otherwise, the inverse is
# recalculated
cacheSolve <- function(x, ...) {
# get the cached inverse
inv <- x$getinv()
if(!is.null(inv)) {
# if the inverse if actually cached, just return it
message("getting cached inverse")
return(inv)
}
# otherwise, calculate the inverse and cache it
matr <- x$get()
inv <- solve(matr, ...)
x$setinv(inv)
return(inv)
}
source('~/R/HOME/best.R')
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
2
submit()
submit()
hospitals <- read.csv("rprog_data3/hospital-data.csv", colClasses = "character")
allstates <- sort(unique(hospitals[,7]))
ranking <- "best"
typeof(ranking)
ranking <- 1
typeof(ranking)
ranking <- 11
typeof(ranking)
ranking <- 11.23
typeof(ranking)
as.integer(ranking)
xrank <- as.integer(ranking)
xrank
str(hospitals)
str(hospitals)
str(allstates)
tail(allstates)
myhospitalset <- subset(outcome[,1:24],outcome[,7] == xstate)
outcome_data <- read.csv("rprog_data3/outcome-of-care-measures.csv", colClasses = "character")
nrow(outcome_data)
str(outcome_data)
tail(outcome_data,1)
outcome_extract <- subset(outcome_data[,1:24])
str(outcome_extract)
str(outcome_extract[,1])
str(outcome_extract[,11])
str(outcome_extract[,17])
str(outcome_extract[,23])
outcome_extract[, 11] <- suppressWarnings(as.numeric(outcome_extract[, 11]))
outcome_extract[, 17] <- suppressWarnings(as.numeric(outcome_extract[, 17]))
outcome_extract[, 23] <- suppressWarnings(as.numeric(outcome_extract[, 23]))
str(outcome_extract[,1])
str(outcome_extract[,23])
str(outcome_extract[,11])
str(outcome_extract[,17])
myhospitalset <- subset(outcome_extract,outcome[,7] == xstate, !is.na([11]))
myhospitalset <- subset(outcome_extract,outcome[,7] == xstate, !is.na([,11]))
myhospitalset <- subset(outcome_extract,outcome[,7] == NC, !is.na([,11]))
##Get rankings
myhospitalset <- subset(outcome_extract,outcome[,7] == NC, !is.na([,11]))
myhospitalset[11]
outcome_extract[11]
outcome_extract[,11]
outcome_extract[11]
myhospitalset <- subset(outcome_extract,outcome[,7] == NC, !is.na([,11]))
myhospitalset <- subset(outcome_extract,outcome[,7] == NC)
myhospitalset <- subset(outcome_extract,outcome_extract[,7] == NC)
myhospitalset <- subset(outcome_extract,outcome_extract[,7] == "NC")
myhospitalset <- subset(outcome_extract,outcome_extract[,7] == "NC",!is.na([,11]))
myhospitalset <- subset(outcome_extract,outcome_extract[,7] == "NC",!is.na(outcome_extract[,11]))
myhospitalset <- subset(outcome_extract,outcome_extract[,7] == "NC",!is.na(outcome_extract[,11])))
myhospitalset <- subset(outcome_extract,outcome_extract[,7] == "NC")
finalmyhospitalset <- subset(myhospitalset,!is.na(myhospitalset[,11]))
