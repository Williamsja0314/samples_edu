housepwr <- read.csv("data/household_power_consumption.txt")
head(housepwr,2)
head(housepwr,1)
housepwr <- read.table(file="data/household_power_consumption.txt", sep=";", header=TRUE)
tail(housepwr,1)
tail(housepwr,2)
str(housepwr)
# XML
library(XML)
#fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
rootNode[[1]]
xpathSApply(rootNode,"//price",xmlValue)
xpathSApply(rootNode,"//price[1]",xmlValue)
xpathSApply(rootNode,"//price[2]",xmlValue)
xpathSApply(rootNode,"//name",xmlValue)
xpathSApply(rootNode,"//name[1]",xmlValue)
xpathSApply(rootNode,"//name[2]",xmlValue)
#Using xmlSApply
xpathSApply(rootNode,"//price[[2]]",xmlValue)
names <- subset(!is.na(xpathSApply(rootNode,"//name",xmlValue)))
names <- (!is.na(xpathSApply(rootNode,"//name",xmlValue)))
names
length(names)
length(xpathSApply(rootNode,"//price",xmlValue))
x
x
xpathSApply(rootNode,"//name[1]",xmlValue)
xpathSApply(rootNode,"//name[5]",xmlValue)
x <- rnorm(100)
hist(x)
plot(x,y)
y <- rnorm(100)
plot(x,y)
z <- rnorm(100)
plot(x,z)
plot(x,y)
par(mar = c(3,2,3,2))
par(mar = c(1,2,3,2))
plot(x,y)
par(mar = c(3,2,3,2))
plot(x,y)
plot(x,y, pch = 10)
plot(x,y, pch = 20)
title("Scatterplot")
text(-2,-2, "Label")
legend("topleft", legent = "data")
legend("topleft", legend = "data")
legend("topleft",legend = "Data", pch = 20)
fit <- lm(y ~ x)
abline(fit)
abline(fit, lwd = 3)
abline(fit, lwd = 3, col = "red")
plot(x,y, xlab = "Weight", ylab = "Height", main = "Scatterplot", pch =20)
par(mar = c(3,4,3,2))
plot(x,y)
plot(x,y, xlab = "Weight", ylab = "Height", main = "Scatterplot", pch =20)
par(mar = c(4,4,3,2))
plot(x,y, xlab = "Weight", ylab = "Height", main = "Scatterplot", pch =20)
fit <- lm(y ~ x)
abline(fit
)
z <- rpois(100,2) #takes range and a lambda
par(mfrow = c(2,1))
plot(x,y, pch =20)
plot(x,z, pch = 19)
par(mfrow = c(2,1))
par(mar = c(4,4,2,2))
plot(x,y, pch =20)
plot(x,z, pch = 19)
par(mar = c(2,2,1,1))
par(mfrow = c(2,2)) #two rows and two columns
plot(x,y, pch =20)
plot(x,z, pch =20)
par(mfrow = c(2,2)) #two rows and two columns
par(mar = c(4,4,2,2))
plot(x,y, pch =20)
plot(x,z, pch =20)
plot(z,x, pch =20)
plot(y,x, pch =20
)
par(mfcol = c(2,2)) #two cols and two rows
#order with be filling out cols first, since specified "mfcol"
par(mar = c(4,4,2,2))
plot(x,y, pch =20)
plot(x,z, pch =20)
plot(z,x, pch =20)
plot(y,x, pch =20)
#we will reset back to 1 plot
par(mfrow = c(1,1))
x <- rnorm(100)
y <- x + rnorm(100)
g <- gl(2,50)
g <- gl(2,50, labels = c("Male", "Female"))
str(g)
plot(x,y, type = "n")
points(x[g == "Male"], y[g == "Male"], col = "green")
points(x[g == "Female"], y[g == "Female"], col = "blue")
#if wanted solid blue circles for Female, can specify:
points(x[g == "Female"], y[g == "Female"], col = "blue", pch =19)
l
l
l
library(lattice)
library(datasets)
#Simple scatterplot
xyplot(Ozone ~ Wind, data = airquality)
str(datasets)
str(airquality)
xyplot(Ozone ~ Temp, data = airquality)
xyplot(Ozone ~ Wind, data = airquality)
xyplot(Ozone ~ Wind, data = airquality)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = ariquality, layout = c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
airquality
p <- xyplot(Ozone ~ Wind, data = airquality) #Nothing happens!
print(p) # #Plot appears
xyplot(Ozone ~ Wind, data = airquality) # #Auto-printing
xyplot(Ozone ~ Wind, data = airquality) # #Auto-printing
xyplot(Ozone ~ Temp, data = airquality) # #Auto-printing
p <- xyplot(Ozone ~ Wind, data = airquality) #Nothing happens!
print(p) # #Plot appears
xyplot(Ozone ~ Temp, data = airquality) # #Auto-printing
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group 1", "Group 2"))
xyplot(y ~ x | f, layout = c(2,1)) #Plot with 2 panels
xyplot(y ~ x | f, panel = function(x,y,...) {
panel.xyplot(x,y, ...) ##first call the default panel
}       panel.abline(h = median(y), lty = 2) ## add a horizontal line at median
)
xyplot(y ~ x | f, panel = function(x,y,...) {
panel.xyplot(x,y, ...) ##first call the default panel
panel.abline(h = median(y), lty = 2) ## add a horizontal line at median
})
https://github.com/hadley/httr/blob/master/demo/oauth2-github.r
"https://github.com/hadley/httr/blob/master/demo/oauth2-github.r"
l
l
library(httr)
# 1. Find OAuth settings for github:
# http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
# Use any URL you would like for the homepage URL (http://github.com is fine)
# and http://localhost:1410 as the callback url
#
# Insert your client ID and secret below - if secret is omitted, it will
# look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("ecd281e77a9b87540686", "64b4c8472840f114cf0b3fcce5d3242a2425388b")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github", "64b4c8472840f114cf0b3fcce5d3242a2425388b")
content(req)
library(httr)
# 1. Find OAuth settings for github:
# http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
# Use any URL you would like for the homepage URL (http://github.com is fine)
# and http://localhost:1410 as the callback url
#
# Insert your client ID and secret below - if secret is omitted, it will
# look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "56b637a5baffac62cad9")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
# http://developer.github.com/v3/oauth/
oauth_endpoints("https://api.github.com/users/jtleek/repos")
# 2. Register an application at https://github.com/settings/applications;
# Use any URL you would like for the homepage URL (http://github.com is fine)
# and http://localhost:1410 as the callback url
#
# Insert your client ID and secret below - if secret is omitted, it will
# look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("534684ee344756cb7f19", "43f1f4de6db56f4de76829f57f154608d773c2b6")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("https://api.github.com/users/jtleek/repos"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
acs <- read.csv("./data/getdata_data_ss06pid.csv")
fileUrl <- "http://biostat.jhsph.edu/~jleek/contact.html"
doc <- htmlTreeParse(fileUrl,useInternal=TRUE)
library(XML)
doc <- htmlTreeParse(fileUrl,useInternal=TRUE)
nchar(10)
nchar(20)
nchar(30)
nchar(100)
nchar(10,4)
nchar(10:11)
nchar(10:12)
nchar(10:14)
nchar(10:17)
nchar(10)
nchar(11)
nchar(12)
doc
doc|more
head(doc)
doc
doc
doc[1]
nchar(doc)
doc
doc[1]
file2Url <- "http://biostat.jhsph.edu/~jleek/contact.html"
doc2 <- read.table(file2url)
doc2 <- read.table(file2Url)
doc2
doc
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
acs <- readLines(con)
close(con)
acs
acs[1]
nchar(acs[1])
nchar(acs[10])
nchar(acs[10])
nchar(acs[10])
nchar(acs[20])
nchar(acs[30])
nchar(acs[100])
nrow(acs)
ncol(acs)
acs
nchar(acs[170])
nchar(acs[173])
nchar(acs[172])
nchar(acs[180])
acsdata <- htmlTreeParse(acs,"//title", xlxmlValue)
library("XML")
acsdata <- htmlTreeParse(acs,"//title", xlxmlValue)
acsdata <- htmlTreeParse(acs,"//title", xmlValue)
acsdata <- htmlTreeParse(con,"//title", xmlValue)
acsdata <- htmlTreeParse(con, useInternalNodes=T)
url1 <- "http://biostat.jhsph.edu/~jleek/contact.html"
acsdata <- htmlTreeParse(url, useInternalNodes=T)
url1 <- "http://biostat.jhsph.edu/~jleek/contact.html"
acsdata <- htmlTreeParse(url1, useInternalNodes=T)
acsdata
xpathSApply(acsdata,"//title", xmlValue)
for <- read.table(./data/getdata_wksst8110.for)
for <- readTable(./data/getdata_wksst8110.for)
for <- read.table(./data/getdata_wksst8110.for)
for <- read.table("./data/getdata_wksst8110.for")
for_table <- read.table("./data/getdata_wksst8110.for")
for_table <- read.table("./data/getdata_wksst8110.for",header=TRUE)
for_table <- read.text("./data/getdata_wksst8110.for",header=TRUE)
for_table <- read.csv("./data/getdata_wksst8110.for",header=TRUE)
for_table
head(for_table,3)
tail(for_table,31)
fixed_table <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
fixed_table
fixed_table[1:4,4]
fixed_table[1:4,4:6]
fixed_table[1:4,3:5]
sum(fixed_table[1:4,4]
)
sum(fixed_table[1:4,4])
tail(fixed_table,1)
head(fixed_table,1)
head(fixed_table,0)
sum(fixed_table[1:1314,4])
head(fixed_table,5)
sum(fixed_table[v4])
sum(fixed_table[4])
tail(fixed_table,5)
fixed_table <- readLines(con=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"))
# Skip 4 lines
fixed_table <- fixed_table[-(1:4)]
mydata <- data.frame(var1 = substr(fixed_table,1,10),
var2 = substr(fixed_table, 16,19),
var3 = substr(fixed_table, 20, 23),
var4 = substr(fixed_table, 29, 32)  # and so on and so on
)
fixed_table
head(fixed_table,3)
nrow(fixed_table)
head(fixed_table)
tail(fixed_table)
str(fixed_table)
fixed_table <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
##
# variation
head(fixed_table)
sum(fixed_table[5])
sum(fixed_table[6])
sum(fixed_table[3])
sum(fixed_table[4])
sum(fixed_table[4])
fixed_table <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(9, 9,4, 9,4, 9,4, 9,4))
#widths=c(12, 7,4, 9,4, 9,4, 9,4))
fixed_table
fixed_table
x <- readLines(con=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"))
# Skip 4 lines
x <- x[-(1:4)]
mydata <- data.frame(var1 = substr(x,1,10),
var2 = substr(x, 16,19),
var3 = substr(x, 20, 23),
var4 = substr(x, 29, 32),
var4 = substr(x, 38, 41) # and so on and so on
)
x
x[3]
x <- readLines(con=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"))
# Skip 4 lines
x <- x[-(1:4)]
mydata <- data.frame(var1 = substr(x,1,9),
var2 = substr(x, 15,18),
var3 = substr(x, 19, 22),
var4 = substr(x, 28, 31),
var4 = substr(x, 37, 40) # and so on and so on
)
mydata
x <- readLines(con=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"))
# Skip 4 lines
x <- x[-(1:4)]
mydata <- data.frame(var1 = substr(x,1,10),
var2 = substr(x, 16,19),
var3 = substr(x, 20, 23),
var4 = substr(x, 29, 32),
var4 = substr(x, 38, 41) # and so on and so on
)
# HDF5  large data sets
x <- readLines(con=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"))
# Skip 4 lines
x <- x[-(1:4)]
mydata <- data.frame(var1 = substr(x,1,10),
var2 = substr(x, 16,19),
var3 = substr(x, 20, 23),
var4 = substr(x, 29, 32),
var4 = substr(x, 38, 41) # and so on and so on
)
mydata
x <- readLines(con=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"))
# Skip 4 lines
x <- x[-(1:4)]
mydata <- data.frame(var1 = substr(x,1,10),
var2 = substr(x, 16,19),
var3 = substr(x, 20, 23),
var4 = substr(x, 29, 32),
var4 = substr(x, 38, 41),
var5 = substr(x, 47, 50) # and so on and so on
x <- readLines(con=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"))
x <- readLines(con=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"))
# Skip 4 lines
x <- x[-(1:4)]
mydata <- data.frame(var1 = substr(x,1,10),
var2 = substr(x, 16,19),
var3 = substr(x, 20, 23),
var4 = substr(x, 29, 32),
var5 = substr(x, 38, 41),
var6 = substr(x, 47, 50) # and so on and so on
)
mydata
head(mydata)
x <- readLines(con=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"))
# Skip 4 lines
x <- x[-(1:4)]
mydata <- data.frame(var1 = substr(x,1,10),
var2 = substr(x, 16,19),
var3 = substr(x, 20, 23),
var4 = substr(x, 28, 32),
var5 = substr(x, 36, 41),
var6 = substr(x, 44, 50) # and so on and so on
)
mydata
df <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4),
skip=4
)
mydata <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4),
skip=4
)
mydata
sum(mydata[4])
sum(mydata[5])
tail(mydata)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
library(ggplot2)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(XML)
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/cameras.xlsx",method="curl")
dateDownloaded <- date()
library(xlsx)
cameraData <- read.xlsx("./data/cameras.xlsx",sheetIndex=1,header=TRUE)
head(cameraData)
str(cameraData)
summary(cameraData)
table(cameraData)
table(cameraData$crossStreet)
summary(cameraData)
table(cameraData$street)
table(cameraData$street,cameraData$crossStreet)
table(cameraData$street,cameraData$crossStreet)
head(table(cameraData$street,cameraData$crossStreet))
nrow(table(cameraData$street,cameraData$crossStreet))
set.seed(13435)
X <- data.frame("var1"=sample(15),"var2"=sample(6:10),"var3"=sample(11:15))
X <- X[sample(1:5),]; X$var2[c(1,3)] = NA
X
#Can use notation such as below..find rows in X, where variable 1
# is less than or equal to 3 and variable 3 is greater than 11.
X[X$var1 <= 3 & X$var3 > 11),]
X[(X$var1 <= 3 & X$var3 > 11),]
X[(X$var1 <= 3 & X$var3 > 11),]
X
set.seed(13435)
X <- data.frame("var1"=sample(15),"var2"=sample(6:10),"var3"=sample(11:15))
X[(X$var1 <= 3 & X$var3 > 11),]
X
#"which" command returns indices
#Sort and order
sort(X$var1)
sort(X$var1,decreasing=TRUE)
X[order(X$var1),]
X[order(X$var1,X$var3),]
#plyr package does ordering also
#"arrange" command:
arrange(x,var1)
library("plyr")
#plyr package does ordering also
#"arrange" command:
arrange(x,var1)
arrange(X,var1)
#Add rows and columns
#var3 is new column
X$var3 <- rnorm(5)
X
if(!file.exists(",/data")) {dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfle="./data/restaurants.csv", method="curl")
download.file(fileUrl,destfle="./data/restaurants.csv")
download.file(fileUrl,destfile="./data/restaurants.csv")
restData <- read.csv("./data/restaurants.csv")
restData
head(restData)
head(restData,3)
summary(restData)
table(restData$zipCode,useNA="ifany")
colSums(is.na(restData))
all(colSums(is.na(restData)) == 0)
restData[restData$zipCode %in% c("21212","21213"),]
data(UCBAdmissions)
DF = as.data.frame(UCBAdmissions)
summary(DF)
xt <- xtabs(Freq ~ Gender + Admit, data=DF)
xt
warpbreaks$replicate <- rep(1:9, len = 54)
xt = xtabs(breaks ~.,data=warpbreaks)
xt
print(object.size(xt), units = "gb")
print(object.size(xt), units = "Mb")
xt = xtabs(breaks ~.,data=warpbreaks)
print(object.size(xt), units = "Mb")
print(object.size(xt), units = "Kb")
