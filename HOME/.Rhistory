)
sum(fixed_table[1:4,4])
tail(fixed_table,1)
head(fixed_table,1)
head(fixed_table,0)
sum(fixed_table[1:1314,4])
head(fixed_table,5)
sum(fixed_table[v4])
sum(fixed_table[4])
tail(fixed_table,5)
fixed_table <- readLines(con=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"))
# Skip 4 lines
fixed_table <- fixed_table[-(1:4)]
mydata <- data.frame(var1 = substr(fixed_table,1,10),
var2 = substr(fixed_table, 16,19),
var3 = substr(fixed_table, 20, 23),
var4 = substr(fixed_table, 29, 32)  # and so on and so on
)
fixed_table
head(fixed_table,3)
nrow(fixed_table)
head(fixed_table)
tail(fixed_table)
str(fixed_table)
fixed_table <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
##
# variation
head(fixed_table)
sum(fixed_table[5])
sum(fixed_table[6])
sum(fixed_table[3])
sum(fixed_table[4])
sum(fixed_table[4])
fixed_table <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(9, 9,4, 9,4, 9,4, 9,4))
#widths=c(12, 7,4, 9,4, 9,4, 9,4))
fixed_table
fixed_table
x <- readLines(con=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"))
# Skip 4 lines
x <- x[-(1:4)]
mydata <- data.frame(var1 = substr(x,1,10),
var2 = substr(x, 16,19),
var3 = substr(x, 20, 23),
var4 = substr(x, 29, 32),
var4 = substr(x, 38, 41) # and so on and so on
)
x
x[3]
x <- readLines(con=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"))
# Skip 4 lines
x <- x[-(1:4)]
mydata <- data.frame(var1 = substr(x,1,9),
var2 = substr(x, 15,18),
var3 = substr(x, 19, 22),
var4 = substr(x, 28, 31),
var4 = substr(x, 37, 40) # and so on and so on
)
mydata
x <- readLines(con=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"))
# Skip 4 lines
x <- x[-(1:4)]
mydata <- data.frame(var1 = substr(x,1,10),
var2 = substr(x, 16,19),
var3 = substr(x, 20, 23),
var4 = substr(x, 29, 32),
var4 = substr(x, 38, 41) # and so on and so on
)
# HDF5  large data sets
x <- readLines(con=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"))
# Skip 4 lines
x <- x[-(1:4)]
mydata <- data.frame(var1 = substr(x,1,10),
var2 = substr(x, 16,19),
var3 = substr(x, 20, 23),
var4 = substr(x, 29, 32),
var4 = substr(x, 38, 41) # and so on and so on
)
mydata
x <- readLines(con=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"))
# Skip 4 lines
x <- x[-(1:4)]
mydata <- data.frame(var1 = substr(x,1,10),
var2 = substr(x, 16,19),
var3 = substr(x, 20, 23),
var4 = substr(x, 29, 32),
var4 = substr(x, 38, 41),
var5 = substr(x, 47, 50) # and so on and so on
x <- readLines(con=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"))
x <- readLines(con=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"))
# Skip 4 lines
x <- x[-(1:4)]
mydata <- data.frame(var1 = substr(x,1,10),
var2 = substr(x, 16,19),
var3 = substr(x, 20, 23),
var4 = substr(x, 29, 32),
var5 = substr(x, 38, 41),
var6 = substr(x, 47, 50) # and so on and so on
)
mydata
head(mydata)
x <- readLines(con=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"))
# Skip 4 lines
x <- x[-(1:4)]
mydata <- data.frame(var1 = substr(x,1,10),
var2 = substr(x, 16,19),
var3 = substr(x, 20, 23),
var4 = substr(x, 28, 32),
var5 = substr(x, 36, 41),
var6 = substr(x, 44, 50) # and so on and so on
)
mydata
df <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4),
skip=4
)
mydata <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4),
skip=4
)
mydata
sum(mydata[4])
sum(mydata[5])
tail(mydata)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
library(ggplot2)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(XML)
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/cameras.xlsx",method="curl")
dateDownloaded <- date()
library(xlsx)
cameraData <- read.xlsx("./data/cameras.xlsx",sheetIndex=1,header=TRUE)
head(cameraData)
str(cameraData)
summary(cameraData)
table(cameraData)
table(cameraData$crossStreet)
summary(cameraData)
table(cameraData$street)
table(cameraData$street,cameraData$crossStreet)
table(cameraData$street,cameraData$crossStreet)
head(table(cameraData$street,cameraData$crossStreet))
nrow(table(cameraData$street,cameraData$crossStreet))
set.seed(13435)
X <- data.frame("var1"=sample(15),"var2"=sample(6:10),"var3"=sample(11:15))
X <- X[sample(1:5),]; X$var2[c(1,3)] = NA
X
#Can use notation such as below..find rows in X, where variable 1
# is less than or equal to 3 and variable 3 is greater than 11.
X[X$var1 <= 3 & X$var3 > 11),]
X[(X$var1 <= 3 & X$var3 > 11),]
X[(X$var1 <= 3 & X$var3 > 11),]
X
set.seed(13435)
X <- data.frame("var1"=sample(15),"var2"=sample(6:10),"var3"=sample(11:15))
X[(X$var1 <= 3 & X$var3 > 11),]
X
#"which" command returns indices
#Sort and order
sort(X$var1)
sort(X$var1,decreasing=TRUE)
X[order(X$var1),]
X[order(X$var1,X$var3),]
#plyr package does ordering also
#"arrange" command:
arrange(x,var1)
library("plyr")
#plyr package does ordering also
#"arrange" command:
arrange(x,var1)
arrange(X,var1)
#Add rows and columns
#var3 is new column
X$var3 <- rnorm(5)
X
if(!file.exists(",/data")) {dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfle="./data/restaurants.csv", method="curl")
download.file(fileUrl,destfle="./data/restaurants.csv")
download.file(fileUrl,destfile="./data/restaurants.csv")
restData <- read.csv("./data/restaurants.csv")
restData
head(restData)
head(restData,3)
summary(restData)
table(restData$zipCode,useNA="ifany")
colSums(is.na(restData))
all(colSums(is.na(restData)) == 0)
restData[restData$zipCode %in% c("21212","21213"),]
data(UCBAdmissions)
DF = as.data.frame(UCBAdmissions)
summary(DF)
xt <- xtabs(Freq ~ Gender + Admit, data=DF)
xt
warpbreaks$replicate <- rep(1:9, len = 54)
xt = xtabs(breaks ~.,data=warpbreaks)
xt
print(object.size(xt), units = "gb")
print(object.size(xt), units = "Mb")
xt = xtabs(breaks ~.,data=warpbreaks)
print(object.size(xt), units = "Mb")
print(object.size(xt), units = "Kb")
carMelt <- melt(mtcars,id=c("carname","gear","cyl"), measure.vars=c("mpg","hp"))
library(reshape2)
head(mtcars)
mtcars$carname <- rownames(mtcars)
#we want to create a condition and pass info as to which variables
# are ID variables, and which are "measure" variables.
carMelt <- melt(mtcars,id=c("carname","gear","cyl"), measure.vars=c("mpg","hp"))
head(carMelt,n=3)
#
tail(carMelt,n=3)
cylData <- dcast(carMelt, cyl ~ variable)
cylData
cylData <- dcast(carMelt, cyl ~ variable,mean)
cylData
head(InsectSprays)
#apply along an index,a function
tapply(InsectSprays$count,InsectSprays$spray,sum)
spIns <- split(InsectSprays$count,InsectSprays$spray)
spIns
spCount <- lapply(spIns,sum)
sprCount
sprCount <- lapply(spIns,sum)
sprCount
library(dplyr)
library(plyr)
spraySums <- ddply(InsectSprays,.(spray),summarize,sum=ave(count,FUN=sum))
dim(spraySums)
head(spraySums)
spraySums[73]
spraySums
spraySums[67,]
spraySums[40:80,]
spraySums[40:72,]
library(dplyr)
chicago <- readRDS("chicago.rds")
library(plyr)
chicago <- readRDS("chicago.rds")
install.packages("dplyr")
library(dplyr)
chicago <- readRDS("chicago.rds")
hotcold <- group_by(chicago, tempcat)
chicago <- readRDS("./data/chicago.rds")
dim(chicago)
str(chicago)
names(chicago)
head(select(chicago, city:dptp))
# Can select "all except"
head(select(chicago, -(city:dptp)))
# Using a filter with dplyr
# gives column with values specified
chic.f <- filter(chicago, pm25tmean2 > 30)
chic.f <- filter(chicago, pm25tmean2 > 30 & tmpd > 80)
# Order rows according to the data variable
if(!file.exists("./data")) {dir.create(",/data")}
fileUrl1 = "https://dl.dropboxusercontent.com/u/7710864/data/reviews-apr29.csv"
fileUrl2 = "https://dl.dropboxusercontent.com/u/7710864/data/solutions-apr29.csv"
download.file(fileUrl1,destfile="./data/reviews.csv")
download.file(fileUrl2,destfile="./data/solutions.csv")
reviews = read.csv("./data/reviews.csv");solutions - read.csv("./data/solutions.csv")
reviews <- read.csv("./data/reviews.csv");solutions <- read.csv("./data/solutions.csv")
head(reviews,2)
head(solutions)
mergedData <- merge(reviews,solutions,by.x="solution_id",by.y="id",all=TRUE)
head(mergedData)
head(mergedData)
library(reshape2)
head(mtcars)
#
mtcars$carname <- rownames(mtcars)
#we want to create a condition and pass info as to which variables
# are ID variables, and which are "measure" variables.
carMelt <- melt(mtcars,id=c("carname","gear","cyl"), measure.vars=c("mpg","hp"))
library("XML")
library("plyr")
library("XLConnect")
library("DBI")
library("RMySQL")
library("data.table")
library("dataview")
library(dplyr)
library(xlsx)
library(jsonlite)
library(data.table)
install.packages("dataview")
library("dataview")
## Read in data
xtest <- read.table("UCI HAR Dataset/test/X_test.txt", stringsAsFactors = FALSE)
ytest <- read.table("UCI HAR Dataset/test/y_test.txt", stringsAsFactors = FALSE)
stest <- read.table("UCI HAR Dataset/test/subject_test.txt", stringsAsFactors = FALSE)
## prepare for merging test data
colnames(ytest) <- c("activity")
colnames(stest) <- c("subject")
## merge test data
combined_test_data <- bind_cols(stest,xtest)
combined_test_data <- bind_cols(ytest,combined_test_data)
## Read train data
xtrain <- read.table("UCI HAR Dataset/train/X_train.txt", stringsAsFactors = FALSE)
ytrain <- read.table("UCI HAR Dataset/train/y_train.txt", stringsAsFactors = FALSE)
strain <- read.table("UCI HAR Dataset/train/subject_train.txt", stringsAsFactors = FALSE)
## prepare for merging train data
colnames(ytrain) <- c("activity")
colnames(strain) <- c("subject")
## merge test data
combined_train_data <- bind_cols(strain,xtrain)
combined_train_data <- bind_cols(ytrain,combined_train_data)
## merge test and train data
combined_data <- bind_rows(combined_test_data,combined_train_data)
## remove all intermediate data
rm(xtest)
rm(ytest)
rm(stest)
rm(xtrain)
rm(ytrain)
rm(strain)
rm(combined_test_data)
rm(combined_train_data)
## readin features list
features <- read.table("UCI HAR Dataset/features.txt", stringsAsFactors = FALSE)
## remove duplicate Columns names
combined_data <- select(combined_data, -( num_range("V", which(duplicated(features[,2]))) ) )
features <- features[,2]
features <- features[!duplicated(features)]
## assign column names to combined_data
colnames(combined_data) <- c("activity","subject",features)
## Extracts only the measurements on the mean and standard deviation for each measurement
p.2 <- select(combined_data, activity,subject ,contains("mean()") , contains("std()") )
## prepare for aply discriptive names
act_lab <- read.table("UCI HAR Dataset/activity_labels.txt")
colnames(act_lab) <- c("activity","activity_label")
## Uses descriptive activity names to name the activities in the data set
p.3 <- left_join(act_lab,p.2, by = "activity")
p.3 <- select(p.3,-activity)
## Appropriately labels the data set with descriptive variable names.
## p.3 contains descriptive variable names
## From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
grouped <- group_by(p.4,activity_label,subject)
p.5 <- summarise_each(grouped,funs(mean))
write.table(p.5,row.name=FALSE, file = "p.5.txt")
library("plyr")
library("data.table")
library("dataview")
library(dplyr)
library(data.table)
## Read in data
xtest <- read.table("UCI HAR Dataset/test/X_test.txt", stringsAsFactors = FALSE)
ytest <- read.table("UCI HAR Dataset/test/y_test.txt", stringsAsFactors = FALSE)
stest <- read.table("UCI HAR Dataset/test/subject_test.txt", stringsAsFactors = FALSE)
## prepare for merging test data
colnames(ytest) <- c("activity")
colnames(stest) <- c("subject")
## merge test data
combined_test_data <- bind_cols(stest,xtest)
combined_test_data <- bind_cols(ytest,combined_test_data)
## Read train data
xtrain <- read.table("UCI HAR Dataset/train/X_train.txt", stringsAsFactors = FALSE)
ytrain <- read.table("UCI HAR Dataset/train/y_train.txt", stringsAsFactors = FALSE)
strain <- read.table("UCI HAR Dataset/train/subject_train.txt", stringsAsFactors = FALSE)
## prepare for merging train data
colnames(ytrain) <- c("activity")
colnames(strain) <- c("subject")
## merge test data
combined_train_data <- bind_cols(strain,xtrain)
combined_train_data <- bind_cols(ytrain,combined_train_data)
## merge test and train data
combined_data <- bind_rows(combined_test_data,combined_train_data)
## remove all intermediate data
rm(xtest)
rm(ytest)
rm(stest)
rm(xtrain)
rm(ytrain)
rm(strain)
rm(combined_test_data)
rm(combined_train_data)
## readin features list
features <- read.table("UCI HAR Dataset/features.txt", stringsAsFactors = FALSE)
## remove duplicate Columns names
combined_data <- select(combined_data, -( num_range("V", which(duplicated(features[,2]))) ) )
features <- features[,2]
features <- features[!duplicated(features)]
## assign column names to combined_data
colnames(combined_data) <- c("activity","subject",features)
## Extracts only the measurements on the mean and standard deviation for each measurement
p.2 <- select(combined_data, activity,subject ,contains("mean()") , contains("std()") )
## prepare for aply discriptive names
act_lab <- read.table("UCI HAR Dataset/activity_labels.txt")
colnames(act_lab) <- c("activity","activity_label")
## Uses descriptive activity names to name the activities in the data set
p.3 <- left_join(act_lab,p.2, by = "activity")
p.3 <- select(p.3,-activity)
## Appropriately labels the data set with descriptive variable names.
## p.3 contains descriptive variable names
## From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
grouped <- group_by(p.4,activity_label,subject)
p.5 <- summarise_each(grouped,funs(mean))
write.table(p.5,row.name=FALSE, file = "p.5.txt")
p3
p.3
head(p.3,3)
p.2
select(p.3, -activity)
select()
NEI <- readRDS("./data/summarySCC_PM25.rds")
SCC <- readRDS("./data/Source_Classification_Code.rds")
nrows(NEI)
nrow(NEI)
nrow(SCC)
par(mar = c(4,4,3,2))
plot(x,y, pch = 10)
x <- rnorm(100)
hist(x)
str(NEI)
head(NEI)
yr1999 <- sum(NEI[Emissions], NEI[year] == 1999)
yr1999 <- sum(NEI[4], NEI[6] == 1999)
hist(x)
yr1999 <- subset(NEI[Emissions], NEI[year] == 1999,na.rm=TRUE)
year1999 <- subset(NEI, !is.na(NEI[4]) & NEI[6] == 1999)
head(year1999)
year2002 <- subset(NEI, !is.na(NEI[4]) & NEI[6] == 2002)
year2005 <- subset(NEI, !is.na(NEI[4]) & NEI[6] == 2005)
year2008 <- subset(NEI, !is.na(NEI[4]) & NEI[6] == 2008)
sum(year2002[4])
sum1999 <- sum(year1999[4])
sum2002 <- sum(year2002[4])
sum2005 <- sum(year2005[4])
sum2008 <- sum(year2008[4])
sum2008
rows1999 <- nrow(year1999)
rows2002 <- nrow(year2002)
rows2005 <- nrow(year2005)
rows2008 <- nrow(year2008)
avg1999 <- sum1999/rows1999
avg2002 <- sum2002/rows2002
avg2005 <- sum2005/rows2005
avg2008 <- sum2008/rows2008
x <- c(avg1999,avg2002,avg2005,avg2008)
y <- c(1999,2002,2005,2008)
plot(x,y)
abline(fit)
title("Total PM2.5 Emissions")
legend("topleft", legend = "Year")
plot(x,z)
x <- c(avg1999,avg2002,avg2005,avg2008)
y <- c(1999,2002,2005,2008)
plot(x,y)
fit <- lm(y ~ x)
Average_Emissions <- c(avg1999,avg2002,avg2005,avg2008)
Year <- c(1999,2002,2005,2008)
plot(Average_Emissions,Year)
title("Total PM2.5 Emissions")
png('Plot1.png')
Average_Emissions <- c(avg1999,avg2002,avg2005,avg2008)
Year <- c(1999,2002,2005,2008)
plot(Average_Emissions,Year)
title("Total PM2.5 Emissions")
dev.off()
acs_q3 <- read.csv(./data/getdata_data_ss06hid.csv, header=TRUE)
acs_q3 <- read.csv("./data/getdata_data_ss06hid.csv", header=TRUE)
str(acs_q3)
head(acs_q3)
summary(acs_q3)
library(reshape2)
library(dplyr)
library(csv)
dim(acs_q3)
acs[1:5,6]
acs_q3[1:5,6]
acs_q3[5000,6]
(acs_q3,acs_q3[6] > 11)
subset(acs_q3,acs_q3[6] > 11)
