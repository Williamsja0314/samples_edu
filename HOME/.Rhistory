fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/cameras.xlsx",method="curl")
dateDownloaded <- date()
library(xlsx)
cameraData <- read.xlsx("./data/cameras.xlsx",sheetIndex=1,header=TRUE)
head(cameraData)
str(cameraData)
summary(cameraData)
table(cameraData)
table(cameraData$crossStreet)
summary(cameraData)
table(cameraData$street)
table(cameraData$street,cameraData$crossStreet)
table(cameraData$street,cameraData$crossStreet)
head(table(cameraData$street,cameraData$crossStreet))
nrow(table(cameraData$street,cameraData$crossStreet))
set.seed(13435)
X <- data.frame("var1"=sample(15),"var2"=sample(6:10),"var3"=sample(11:15))
X <- X[sample(1:5),]; X$var2[c(1,3)] = NA
X
#Can use notation such as below..find rows in X, where variable 1
# is less than or equal to 3 and variable 3 is greater than 11.
X[X$var1 <= 3 & X$var3 > 11),]
X[(X$var1 <= 3 & X$var3 > 11),]
X[(X$var1 <= 3 & X$var3 > 11),]
X
set.seed(13435)
X <- data.frame("var1"=sample(15),"var2"=sample(6:10),"var3"=sample(11:15))
X[(X$var1 <= 3 & X$var3 > 11),]
X
#"which" command returns indices
#Sort and order
sort(X$var1)
sort(X$var1,decreasing=TRUE)
X[order(X$var1),]
X[order(X$var1,X$var3),]
#plyr package does ordering also
#"arrange" command:
arrange(x,var1)
library("plyr")
#plyr package does ordering also
#"arrange" command:
arrange(x,var1)
arrange(X,var1)
#Add rows and columns
#var3 is new column
X$var3 <- rnorm(5)
X
if(!file.exists(",/data")) {dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfle="./data/restaurants.csv", method="curl")
download.file(fileUrl,destfle="./data/restaurants.csv")
download.file(fileUrl,destfile="./data/restaurants.csv")
restData <- read.csv("./data/restaurants.csv")
restData
head(restData)
head(restData,3)
summary(restData)
table(restData$zipCode,useNA="ifany")
colSums(is.na(restData))
all(colSums(is.na(restData)) == 0)
restData[restData$zipCode %in% c("21212","21213"),]
data(UCBAdmissions)
DF = as.data.frame(UCBAdmissions)
summary(DF)
xt <- xtabs(Freq ~ Gender + Admit, data=DF)
xt
warpbreaks$replicate <- rep(1:9, len = 54)
xt = xtabs(breaks ~.,data=warpbreaks)
xt
print(object.size(xt), units = "gb")
print(object.size(xt), units = "Mb")
xt = xtabs(breaks ~.,data=warpbreaks)
print(object.size(xt), units = "Mb")
print(object.size(xt), units = "Kb")
carMelt <- melt(mtcars,id=c("carname","gear","cyl"), measure.vars=c("mpg","hp"))
library(reshape2)
head(mtcars)
mtcars$carname <- rownames(mtcars)
#we want to create a condition and pass info as to which variables
# are ID variables, and which are "measure" variables.
carMelt <- melt(mtcars,id=c("carname","gear","cyl"), measure.vars=c("mpg","hp"))
head(carMelt,n=3)
#
tail(carMelt,n=3)
cylData <- dcast(carMelt, cyl ~ variable)
cylData
cylData <- dcast(carMelt, cyl ~ variable,mean)
cylData
head(InsectSprays)
#apply along an index,a function
tapply(InsectSprays$count,InsectSprays$spray,sum)
spIns <- split(InsectSprays$count,InsectSprays$spray)
spIns
spCount <- lapply(spIns,sum)
sprCount
sprCount <- lapply(spIns,sum)
sprCount
library(dplyr)
library(plyr)
spraySums <- ddply(InsectSprays,.(spray),summarize,sum=ave(count,FUN=sum))
dim(spraySums)
head(spraySums)
spraySums[73]
spraySums
spraySums[67,]
spraySums[40:80,]
spraySums[40:72,]
library(dplyr)
chicago <- readRDS("chicago.rds")
library(plyr)
chicago <- readRDS("chicago.rds")
install.packages("dplyr")
library(dplyr)
chicago <- readRDS("chicago.rds")
hotcold <- group_by(chicago, tempcat)
chicago <- readRDS("./data/chicago.rds")
dim(chicago)
str(chicago)
names(chicago)
head(select(chicago, city:dptp))
# Can select "all except"
head(select(chicago, -(city:dptp)))
# Using a filter with dplyr
# gives column with values specified
chic.f <- filter(chicago, pm25tmean2 > 30)
chic.f <- filter(chicago, pm25tmean2 > 30 & tmpd > 80)
# Order rows according to the data variable
if(!file.exists("./data")) {dir.create(",/data")}
fileUrl1 = "https://dl.dropboxusercontent.com/u/7710864/data/reviews-apr29.csv"
fileUrl2 = "https://dl.dropboxusercontent.com/u/7710864/data/solutions-apr29.csv"
download.file(fileUrl1,destfile="./data/reviews.csv")
download.file(fileUrl2,destfile="./data/solutions.csv")
reviews = read.csv("./data/reviews.csv");solutions - read.csv("./data/solutions.csv")
reviews <- read.csv("./data/reviews.csv");solutions <- read.csv("./data/solutions.csv")
head(reviews,2)
head(solutions)
mergedData <- merge(reviews,solutions,by.x="solution_id",by.y="id",all=TRUE)
head(mergedData)
head(mergedData)
library(reshape2)
head(mtcars)
#
mtcars$carname <- rownames(mtcars)
#we want to create a condition and pass info as to which variables
# are ID variables, and which are "measure" variables.
carMelt <- melt(mtcars,id=c("carname","gear","cyl"), measure.vars=c("mpg","hp"))
show
show_var
clear
acsq3 <- read.csv("./data/getdata-data-ss06hid.csv", header=TRUE)
TenAcres <- subset(acsq3,acsq3$ACR == 3)
TenAcres
tenacres <- subset(acsq3,acsq3$ACR == 3)
tenacresSales <- subset(tenacres,tenacres$AGS == 6)
agricultureLogical <- subset(tenacres,tenacres$AGS == 6)
which(tenacres,AGS == 6)
which()
which(agricultureLogical)
nrow(tenacresSales)
agricultureLogical <- (acsq3$AGS == 6 & acs3$AGC == 6)
agricultureLogical <- (acsq3$AGS == 6 & acsq3$AGC == 6)
which(agricultureLogical)
agricultureLogical <- (acsq3$AGS == 3 & acsq3$AGC == 6)
which(agricultureLogical)
agricultureLogical <- (acsq3$ACR == 3 & acsq3$AGC == 6)
agricultureLogical <- (acsq3$ACR == 3 & acsq3$AGS == 6)
which(agricultureLogical)
install.packages("jpeg")
library(jpeg)
instructor <- readJPEG(system.file("img","getdata-jeff.jpg", package="jpeg"))
img.n <- readJPEG(system.file("img","getdata-jeff.jpg", package="jpeg"),TRUE)
library(jpeg)
img.n <- readJPEG(system.file("img","getdata-jeff.jpg", package="jpeg"),TRUE)
img.n <- readJPEG(system.file("img","getdata-jeff.jpg", package="jpeg"),native=TRUE)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile = "./data/GDP.csv")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile = "./data/EDU.csv")
GDP <- read.csv("./data/GDP.csv", header=TRUE)
EDU <- read.csv("./data/EDU.csv", header=TRUE)
GDP
EDU
head(GDP)
str(GDP)
GDP[1]
GDP[1,1]
GDP[1,2]
GDP[1,5]
GDP[0,0]
GDP[1,0]
GDP[0,1]
summary(GDP)
header(GDP,1)
head(GDP,1)
head(GDP,2)
tail(GDP,2)
EDU
str(GDP)
GDP <- read.csv("./data/GDP.csv")
EDU <- read.csv("./data/EDU.csv")
EDU
colnames(GDP)
colnames(EDU)
GDP[.1]
GDP[,1]
GDP[,2]
str(GDP)
GDP[X]
GDP[X.1]
GDP[,2]
GDP[,1]
GDP[,X.1]
colnames(GDP)
GDP$X
colnames(EDU)
mergedData <- merge(GDP,EDU,by.x="X",by.y="CountryCode",all=TRUE)
nrow(mergedData)
mergedData <- merge(GDP,EDU,by.x="X",by.y="CountryCode",all=FALSE)
nrow(mergedData)
mergedData <- merge(GDP,EDU,by.x="X",by.y="CountryCode",all=FALSE, na.rm=TRUE)
nrow(mergedData)
## read in with jpeg package
library(jpeg)
file.info("getdata-jeff.jpg")
img.n <- readJPEG("getdata-jeff.jpg",native=TRUE)
img.n
library(jpeg)
file.info("getdata-jeff.jpg")
#img.n <- readJPEG(system.file("img","getdata-jeff.jpg", package="jpeg"),native=TRUE)
img.n <- readJPEG("getdata-jeff.jpg",native=TRUE)
img.n <- readJPEG("getdata-jeff.jpg",native=TRUE)
library(jpeg)
install.packages("jpeg")
library(jpeg)
file.info("getdata-jeff.jpg")
#img.n <- readJPEG(system.file("img","getdata-jeff.jpg", package="jpeg"),native=TRUE)
img.n <- readJPEG("getdata-jeff.jpg",native=TRUE)
quantile(img.n)
quantile(img.n,0,30,80,100)
quantile(img.n,c(0,30,80,100))
quantile(img.n,c(0,.30,.80,1))
GDP <- read.csv("./data/GDP.csv")
EDU <- read.csv("./data/EDU.csv")
str(GDP)
head(GDP[1])
head(GDP[3:5])
head(GDP[6:8])
head(GDP[9:11])
head(GDP[9:10])
mergedData <- merge(GDP,EDU,by.x="X",by.y="CountryCode",all=FALSE, na.rm=TRUE)
head(mergedData[9:11])
head(mergedData[9:15])
str(mergedData$Income.Group)
str(mergedData$Income.Group$nonOECD)
head(mergedData[15])
head(mergedData[15],9)
head(mergedData[15],9:22)
head(mergedData[15],9:11)
head(mergedData[15],2)
str(mergedData$Other.groups)
swirl()
library(swirl)
swirl()
swirl()
quit
0
exit
load(swirl)
library(swirl)
swirl()
mydf <- read.csv(path2csv,stringsAsFactore = FALSE)
mydf <- read.csv(path2csv,stringsAsFactor = FALSE)
path2csv
mydf <- read.csv("C:/Program Files/R/R-3.1.2/library/swirl/Courses/Getting_and_Cleaning_Data/Manipulating_Data_with_dplyr/2014-07-08.csv",stringsAsFactor = FALSE)
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id,package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 | r_os == "linux-gnu")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500 & r_os eq "linux-gnu")
info()
?Comparisons
?Comparison
filter(cran, size > 100500 & r_os equals "linux-gnu")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_os))
filter(cran, !is.na(r_version))
cran2 <- select(size:ip_id)
cran2 <- select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country (ascending), r_version (descending), ip_id (ascending))
arrange(cran2, country, desc(r_version), ip_id)
select(cran,ip_id,package,size)
cran3 <- select(cran,ip_id,package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size * 2^30)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(jpeg)
file.info("getdata-jeff.jpg")
#img.n <- readJPEG(system.file("img","getdata-jeff.jpg", package="jpeg"),native=TRUE)
img.n <- readJPEG("getdata-jeff.jpg",native=TRUE)
quantile(img.n,c(0,.30,.80,1))
GDP <- read.csv("./data/GDP.csv")
EDU <- read.csv("./data/EDU.csv")
tail(EDU)
head(EDU,1)
head(EDU,2)
head(EDU,2)
head(GDP,2)
EDU <- subset(EDU,!is.na(EDU$CountryCode))
head(GDP,2)
head(EDU,2)
head(EDU,1)
head(EDU,1)
mergedData <- merge(EDU,GDPby.x="X",by.y="CountryCode",all=FALSE, na.rm=TRUE)
mergedData <- merge(EDU,GDP,by.x="X",by.y="CountryCode",all=FALSE, na.rm=TRUE)
mergedData <- merge(EDU,GDP,by.x= "CountryCode",by.y= "X",all=FALSE, na.rm=TRUE)
mergedData <- merge(EDU,GDP,by.x= "CountryCode",by.y= "X",all=FALSE)
mergedData <- merge(EDU,GDP,by.x= "CountryCode",by.y= "X",all=FALSE)
nrow(mergedData)
head(EDU,2)
head(GDP,2)
AvgOECD <- subset(GDP,GDP$Income.Group == 'High income: nonOECD')
AvgOECD
str(GDP)
head(GDP[2],2)
head(GDP[2],5)
head(GDP[2],7)
head(GDP[11],7)
head(GDP[10],7)
head(GDP[9],7)
head(GDP[8],7)
head(GDP[7],7)
head(GDP[6],7)
head(GDP[5],7)
head(GDP[4],7)
head(GDP[3],7)
str(GDP)
head(GDP,2)
head(GDP,2)
colnames(GDP)
GDP$Income.Group
subset(GDP,GDP$Income.Group)
subset(GDP,!is.na(GDP$Income.Group))
grep()
hidsplit <- read.csv(./data/getdata_data_ss06hid.csv)
hidsplit <- read.csv("./data/getdata_data_ss06hid.csv")
strsplit(hidsplit, "wgtp")
strsplit("hidsplit", "wgtp")
hidsplit <- "I am a loon wgtp wgt p"
strsplit("hidsplit", "wgtp")
strsplit("hidsplit", " ")
strsplit(hidsplit, " ")
hidsplit <- read.csv("./data/getdata_data_ss06hid.csv")
strsplit(hidsplit, " ")
hidsplit
names(hidsplit)
hidsplit <- read.csv("./data/getdata_data_ss06hid.csv")
hidsplitn <- names(hidsplit)
strsplit(hidsplit, "wgtp")
hidsplit <- read.csv("./data/getdata_data_ss06hid.csv")
hidsplitn <- names(hidsplit)
strsplit(hidsplitn, "wgtp")
answer <- strsplit(hidsplitn, "wgtp")
answer[123]
GDP1 <- read.csv("./data/GDP1.csv")
rm("GDP1")
gdp1 <- read.csv("./data/GDP1.csv")
names(gdp1)
gdp1[3,2]
gdp1[2]
gdp1[1:4]
head(gdp1[1:4])
tail(gdp1[1:4])
tail(gdp1)
tail(gdp1)
tail(gdp1,12)
library(xlsx)
gdp190 <- read.xlsx("./data/grossproduct190.xlsx",sheetIndex=1,header=TRUE)
gdp190 <- read.xlsx("./data/grossproduct190.xls",sheetIndex=1,header=TRUE)
head(gdp190)
tail(gdp190)
gdp190
head(gdp190)
gdp190[5]
head(gdp190[5],4)
head(gdp190[5],6)
head(gdp190[5],10)
head(gdp190[5],6:10)
gdp190ans <- subset(gdp190, !is.na(gdp190[5]))
library(xlsx)
gdp190 <- read.xlsx("./data/grossproduct190.xls",sheetIndex=1,header=TRUE)
gdp190ans <- subset(gdp190, !is.na(gdp190[5]))
head(gdp190ans[5],9)
head(gdp190ans[5],[3459])
gdp190ans[3,5]
gdp190ans[4,5]
gdp190ans[4,]
gdp190ans[3,]
gdp190ans[2,]
gdp190ans[3,]
gdp190ans[4,]
gdp190ans[3,]
nrow(gdp190ans)
gdp190ans <- gdp190ans[3:230,]
sum(gdp190ans[3])
head(gdp190ans,1)
head(gdp190ans,2)
head(gdp190ans,2)
sum(gdp190ans[3], na.rm=TRUE)
gdp190ans[3]
gdp190ans[5]
goodvalues <- subset(gdp190ans,gdp190ans[5] != '..'
)
goodvalues <- subset(gdp190ans,gdp190ans[5] != '..')
goodvalues[5]
sum(goodvalues[5])
goodvalues[5]
goodvalues[199]
goodvalues[199,5]
goodvalues[201,5]
goodvalues[5]
sum(goodvalues[5])
count(goodvalues[5])
nrow(goodvalues[5])
goodvalues <- subset(gdp190ans,gdp190ans[5] >= '0')
goodvalues <- subset(gdp190ans,gdp190ans[5] => '0')
goodvalues <- subset(gdp190ans,gdp190ans[5] > '-1')
goodvalues <- subset(gdp190ans,gdp190ans[5] gt '-1')
goodvalues <- subset(gdp190ans,gdp190ans[5] == '-1')
goodvalues <- subset(gdp190ans,gdp190ans[5] == '-0')
goodvalues[5]
goodvalues <- subset(gdp190ans,gdp190ans[5] == '0')
goodvalues
goodvalues <- subset(gdp190,gdp19[5] > '-1')
goodvalues <- subset(gdp190,gdp190[5] > '-1')
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
names(sampleTimes)
head(sampleTimes)
sampleTimes, sampleTimes[] %in% 2012
sampleTimes[] %in% 2012
head(sampleTimes)
sampleTimes[] == "2007-01-03"
sampleTimes[1] == "2007-01-03"
sampleTimes[2] == "2007-01-03"
sampleTimes[1:3] == "2007-01-03"
subset(sampleTimes == "2007-01-03")
nrow(sampleTimes == "2007-01-03")
mycount <- (sampleTimes == "2007-01-03")
mycount
count(mycount == "2007-0101")
nrow(mycount == "2007-0101")
colnumbs(mycount == "2007-0101")
mynumbs <- (sampleTimes == "2007-01-01")
head(mynumbs)
mynumbs <- (sampleTimes == "2007-01-09")
head(mynumbs)
count(mynumbs)
a <- table(sampleTimes == "2007-01-09")
a
a <- table(sampleTimes == "2007-01-*")
a <- table(sampleTimes %in% "2012")
a
sampleTimes
a <- table(sampleTimes == "2007-01-0[9]")
a <- table(sampleTimes == 2007*)
seq(from = as.Date("2012/01/01", "%y/%m/%d"), to = as.Date("2012/12/31","%y/%m/%d
)
))
""
)))))
df$DATE1 <- as.Date(df$DATE1, format ="%y%m%d")
sampleTimes1 <- as.Date(sampleTimes, format ="%y%m%d")
sampleTimes1
sampleTimes|grep "2012"
grep ("2012", sampleTimes)
